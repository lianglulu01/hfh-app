{"remainingRequest":"/Users/lianglulu/Documents/hfh/vue/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/lianglulu/Documents/hfh/vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/lianglulu/Documents/hfh/vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lianglulu/Documents/hfh/vue/src/views/Page.vue?vue&type=template&id=5a7b936e&scoped=true&","dependencies":[{"path":"/Users/lianglulu/Documents/hfh/vue/src/views/Page.vue","mtime":1584016684614},{"path":"/Users/lianglulu/Documents/hfh/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lianglulu/Documents/hfh/vue/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/lianglulu/Documents/hfh/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lianglulu/Documents/hfh/vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}